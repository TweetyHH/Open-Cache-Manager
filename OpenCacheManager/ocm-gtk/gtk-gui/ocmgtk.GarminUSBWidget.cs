// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace ocmgtk {
    
    
    public partial class GarminUSBWidget {
        
        private Gtk.VBox vbox2;
        
        private Gtk.Table table1;
        
        private Gtk.ComboBox descMode;
        
        private Gtk.Label label1;
        
        private Gtk.Label label2;
        
        private Gtk.CheckButton limitCheck;
        
        private Gtk.Entry limitEntry;
        
        private Gtk.ComboBox nameMode;
        
        private Gtk.HBox hbox2;
        
        private Gtk.Image image2;
        
        private Gtk.Button hotPlugButton;
        
        private Gtk.Label label4;
        
        protected virtual void Build() {
            Stetic.Gui.Initialize(this);
            // Widget ocmgtk.GarminUSBWidget
            Stetic.BinContainer.Attach(this);
            this.Name = "ocmgtk.GarminUSBWidget";
            // Container child ocmgtk.GarminUSBWidget.Gtk.Container+ContainerChild
            this.vbox2 = new Gtk.VBox();
            this.vbox2.Name = "vbox2";
            this.vbox2.Spacing = 6;
            this.vbox2.BorderWidth = ((uint)(6));
            // Container child vbox2.Gtk.Box+BoxChild
            this.table1 = new Gtk.Table(((uint)(3)), ((uint)(2)), false);
            this.table1.Name = "table1";
            this.table1.RowSpacing = ((uint)(6));
            this.table1.ColumnSpacing = ((uint)(6));
            // Container child table1.Gtk.Table+TableChild
            this.descMode = Gtk.ComboBox.NewText();
            this.descMode.AppendText(Mono.Unix.Catalog.GetString("Cache Name"));
            this.descMode.AppendText(Mono.Unix.Catalog.GetString("Cache Code/Size/Hint"));
            this.descMode.AppendText(Mono.Unix.Catalog.GetString("Cache Code/Size/Type"));
            this.descMode.Name = "descMode";
            this.descMode.Active = 0;
            this.table1.Add(this.descMode);
            Gtk.Table.TableChild w1 = ((Gtk.Table.TableChild)(this.table1[this.descMode]));
            w1.TopAttach = ((uint)(2));
            w1.BottomAttach = ((uint)(3));
            w1.LeftAttach = ((uint)(1));
            w1.RightAttach = ((uint)(2));
            w1.XOptions = ((Gtk.AttachOptions)(4));
            w1.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.label1 = new Gtk.Label();
            this.label1.Name = "label1";
            this.label1.Xalign = 0F;
            this.label1.LabelProp = Mono.Unix.Catalog.GetString("Waypoint Name Format:");
            this.table1.Add(this.label1);
            Gtk.Table.TableChild w2 = ((Gtk.Table.TableChild)(this.table1[this.label1]));
            w2.TopAttach = ((uint)(1));
            w2.BottomAttach = ((uint)(2));
            w2.XOptions = ((Gtk.AttachOptions)(4));
            w2.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.label2 = new Gtk.Label();
            this.label2.Name = "label2";
            this.label2.Xalign = 0F;
            this.label2.LabelProp = Mono.Unix.Catalog.GetString("Waypoint Description Format:");
            this.table1.Add(this.label2);
            Gtk.Table.TableChild w3 = ((Gtk.Table.TableChild)(this.table1[this.label2]));
            w3.TopAttach = ((uint)(2));
            w3.BottomAttach = ((uint)(3));
            w3.XOptions = ((Gtk.AttachOptions)(4));
            w3.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.limitCheck = new Gtk.CheckButton();
            this.limitCheck.CanFocus = true;
            this.limitCheck.Name = "limitCheck";
            this.limitCheck.Label = Mono.Unix.Catalog.GetString("Limit Number of Geocaches");
            this.limitCheck.Active = true;
            this.limitCheck.DrawIndicator = true;
            this.limitCheck.UseUnderline = true;
            this.table1.Add(this.limitCheck);
            Gtk.Table.TableChild w4 = ((Gtk.Table.TableChild)(this.table1[this.limitCheck]));
            w4.XOptions = ((Gtk.AttachOptions)(4));
            w4.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.limitEntry = new Gtk.Entry();
            this.limitEntry.CanFocus = true;
            this.limitEntry.Name = "limitEntry";
            this.limitEntry.Text = "500";
            this.limitEntry.IsEditable = true;
            this.limitEntry.InvisibleChar = 'â€¢';
            this.table1.Add(this.limitEntry);
            Gtk.Table.TableChild w5 = ((Gtk.Table.TableChild)(this.table1[this.limitEntry]));
            w5.LeftAttach = ((uint)(1));
            w5.RightAttach = ((uint)(2));
            w5.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.nameMode = Gtk.ComboBox.NewText();
            this.nameMode.AppendText(Mono.Unix.Catalog.GetString("Cache Code"));
            this.nameMode.AppendText(Mono.Unix.Catalog.GetString("Cache Name"));
            this.nameMode.Name = "nameMode";
            this.nameMode.Active = 0;
            this.table1.Add(this.nameMode);
            Gtk.Table.TableChild w6 = ((Gtk.Table.TableChild)(this.table1[this.nameMode]));
            w6.TopAttach = ((uint)(1));
            w6.BottomAttach = ((uint)(2));
            w6.LeftAttach = ((uint)(1));
            w6.RightAttach = ((uint)(2));
            w6.XOptions = ((Gtk.AttachOptions)(4));
            w6.YOptions = ((Gtk.AttachOptions)(4));
            this.vbox2.Add(this.table1);
            Gtk.Box.BoxChild w7 = ((Gtk.Box.BoxChild)(this.vbox2[this.table1]));
            w7.Position = 0;
            w7.Expand = false;
            w7.Fill = false;
            // Container child vbox2.Gtk.Box+BoxChild
            this.hbox2 = new Gtk.HBox();
            this.hbox2.Name = "hbox2";
            this.hbox2.Spacing = 6;
            // Container child hbox2.Gtk.Box+BoxChild
            this.image2 = new Gtk.Image();
            this.image2.Name = "image2";
            this.image2.Pixbuf = Stetic.IconLoader.LoadIcon(this, "gtk-dialog-warning", Gtk.IconSize.Menu, 16);
            this.hbox2.Add(this.image2);
            Gtk.Box.BoxChild w8 = ((Gtk.Box.BoxChild)(this.hbox2[this.image2]));
            w8.Position = 0;
            w8.Expand = false;
            w8.Fill = false;
            // Container child hbox2.Gtk.Box+BoxChild
            this.hotPlugButton = new Gtk.Button();
            this.hotPlugButton.CanFocus = true;
            this.hotPlugButton.Name = "hotPlugButton";
            this.hotPlugButton.Relief = ((Gtk.ReliefStyle)(2));
            // Container child hotPlugButton.Gtk.Container+ContainerChild
            this.label4 = new Gtk.Label();
            this.label4.Name = "label4";
            this.label4.LabelProp = Mono.Unix.Catalog.GetString("<b>Important:</b>  You may need to configure non-root access to\nUSB to allow OCM to write to your Garmin Device. See:\n<span fgcolor=\"blue\">http://www.gpsbabel.org/os/Linux_Hotplug.html</span>");
            this.label4.UseMarkup = true;
            this.hotPlugButton.Add(this.label4);
            this.hotPlugButton.Label = null;
            this.hbox2.Add(this.hotPlugButton);
            Gtk.Box.BoxChild w10 = ((Gtk.Box.BoxChild)(this.hbox2[this.hotPlugButton]));
            w10.Position = 1;
            w10.Expand = false;
            w10.Fill = false;
            this.vbox2.Add(this.hbox2);
            Gtk.Box.BoxChild w11 = ((Gtk.Box.BoxChild)(this.vbox2[this.hbox2]));
            w11.Position = 1;
            w11.Expand = false;
            w11.Fill = false;
            this.Add(this.vbox2);
            if ((this.Child != null)) {
                this.Child.ShowAll();
            }
            this.Hide();
            this.limitCheck.Toggled += new System.EventHandler(this.OnLimitToggle);
            this.hotPlugButton.Clicked += new System.EventHandler(this.OnHotplugClick);
        }
    }
}
