// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------



public partial class MainWindow {
    
    private Gtk.UIManager UIManager;
    
    private Gtk.Action FileAction;
    
    private Gtk.Action QuitAction;
    
    private Gtk.Action EditAction;
    
    private Gtk.Action ViewAction;
    
    private Gtk.Action HelpAction;
    
    private Gtk.Action missingImageAction;
    
    private Gtk.Action openAction;
    
    private Gtk.Action saveAction;
    
    private Gtk.Action saveAsAction;
    
    private Gtk.Action OpenAction;
    
    private Gtk.Action SaveAction;
    
    private Gtk.Action ExportAction;
    
    private Gtk.Action AboutAction;
    
    private Gtk.Action convertAction;
    
    private Gtk.Action openAction1;
    
    private Gtk.VBox vbox1;
    
    private Gtk.MenuBar mainmenubar;
    
    private Gtk.Toolbar toolbar1;
    
    private Gtk.HPaned hpaned1;
    
    private ocmgtk.CacheList cachelist1;
    
    private ocmgtk.GeoCachePane geocachepane1;
    
    private Gtk.Statusbar statusbar1;
    
    protected virtual void Build() {
        Stetic.Gui.Initialize(this);
        // Widget MainWindow
        this.UIManager = new Gtk.UIManager();
        Gtk.ActionGroup w1 = new Gtk.ActionGroup("Default");
        this.FileAction = new Gtk.Action("FileAction", Mono.Unix.Catalog.GetString("_File"), null, null);
        this.FileAction.ShortLabel = Mono.Unix.Catalog.GetString("_File");
        w1.Add(this.FileAction, "<Alt><Mod2>f");
        this.QuitAction = new Gtk.Action("QuitAction", Mono.Unix.Catalog.GetString("_Quit"), null, "gtk-quit");
        this.QuitAction.ShortLabel = Mono.Unix.Catalog.GetString("_Quit");
        w1.Add(this.QuitAction, null);
        this.EditAction = new Gtk.Action("EditAction", Mono.Unix.Catalog.GetString("Edit"), null, null);
        this.EditAction.ShortLabel = Mono.Unix.Catalog.GetString("Edit");
        w1.Add(this.EditAction, null);
        this.ViewAction = new Gtk.Action("ViewAction", Mono.Unix.Catalog.GetString("View"), null, null);
        this.ViewAction.ShortLabel = Mono.Unix.Catalog.GetString("View");
        w1.Add(this.ViewAction, null);
        this.HelpAction = new Gtk.Action("HelpAction", Mono.Unix.Catalog.GetString("Help"), null, null);
        this.HelpAction.ShortLabel = Mono.Unix.Catalog.GetString("Help");
        w1.Add(this.HelpAction, null);
        this.missingImageAction = new Gtk.Action("missingImageAction", null, null, "gtk-missing-image");
        w1.Add(this.missingImageAction, null);
        this.openAction = new Gtk.Action("openAction", null, null, "gtk-open");
        w1.Add(this.openAction, null);
        this.saveAction = new Gtk.Action("saveAction", null, null, "gtk-save");
        w1.Add(this.saveAction, null);
        this.saveAsAction = new Gtk.Action("saveAsAction", null, null, "gtk-save-as");
        w1.Add(this.saveAsAction, null);
        this.OpenAction = new Gtk.Action("OpenAction", Mono.Unix.Catalog.GetString("Open"), null, null);
        this.OpenAction.ShortLabel = Mono.Unix.Catalog.GetString("Open");
        w1.Add(this.OpenAction, null);
        this.SaveAction = new Gtk.Action("SaveAction", Mono.Unix.Catalog.GetString("Save"), null, null);
        this.SaveAction.ShortLabel = Mono.Unix.Catalog.GetString("Save");
        w1.Add(this.SaveAction, null);
        this.ExportAction = new Gtk.Action("ExportAction", Mono.Unix.Catalog.GetString("Export..."), null, null);
        this.ExportAction.ShortLabel = Mono.Unix.Catalog.GetString("Export...");
        w1.Add(this.ExportAction, null);
        this.AboutAction = new Gtk.Action("AboutAction", Mono.Unix.Catalog.GetString("About"), null, "gtk-about");
        this.AboutAction.ShortLabel = Mono.Unix.Catalog.GetString("About");
        w1.Add(this.AboutAction, null);
        this.convertAction = new Gtk.Action("convertAction", null, null, "gtk-convert");
        w1.Add(this.convertAction, null);
        this.openAction1 = new Gtk.Action("openAction1", null, null, "gtk-open");
        w1.Add(this.openAction1, null);
        this.UIManager.InsertActionGroup(w1, 0);
        this.AddAccelGroup(this.UIManager.AccelGroup);
        this.Name = "MainWindow";
        this.Title = Mono.Unix.Catalog.GetString("Open Cache Manager");
        this.Icon = Gdk.Pixbuf.LoadFromResource("traditional.svg");
        this.WindowPosition = ((Gtk.WindowPosition)(1));
        // Container child MainWindow.Gtk.Container+ContainerChild
        this.vbox1 = new Gtk.VBox();
        this.vbox1.Name = "vbox1";
        // Container child vbox1.Gtk.Box+BoxChild
        this.UIManager.AddUiFromString("<ui><menubar name='mainmenubar'><menu name='FileAction' action='FileAction'><menuitem name='OpenAction' action='OpenAction'/><menuitem name='ExportAction' action='ExportAction'/><separator/><menuitem name='QuitAction' action='QuitAction'/></menu><menu name='EditAction' action='EditAction'/><menu name='ViewAction' action='ViewAction'/><menu name='HelpAction' action='HelpAction'><menuitem name='AboutAction' action='AboutAction'/></menu></menubar></ui>");
        this.mainmenubar = ((Gtk.MenuBar)(this.UIManager.GetWidget("/mainmenubar")));
        this.mainmenubar.Name = "mainmenubar";
        this.vbox1.Add(this.mainmenubar);
        Gtk.Box.BoxChild w2 = ((Gtk.Box.BoxChild)(this.vbox1[this.mainmenubar]));
        w2.Position = 0;
        w2.Expand = false;
        w2.Fill = false;
        // Container child vbox1.Gtk.Box+BoxChild
        this.UIManager.AddUiFromString("<ui><toolbar name='toolbar1'><toolitem name='openAction1' action='openAction1'/></toolbar></ui>");
        this.toolbar1 = ((Gtk.Toolbar)(this.UIManager.GetWidget("/toolbar1")));
        this.toolbar1.Name = "toolbar1";
        this.toolbar1.ShowArrow = false;
        this.toolbar1.ToolbarStyle = ((Gtk.ToolbarStyle)(0));
        this.toolbar1.IconSize = ((Gtk.IconSize)(3));
        this.vbox1.Add(this.toolbar1);
        Gtk.Box.BoxChild w3 = ((Gtk.Box.BoxChild)(this.vbox1[this.toolbar1]));
        w3.Position = 1;
        w3.Expand = false;
        w3.Fill = false;
        // Container child vbox1.Gtk.Box+BoxChild
        this.hpaned1 = new Gtk.HPaned();
        this.hpaned1.CanFocus = true;
        this.hpaned1.Name = "hpaned1";
        this.hpaned1.Position = 227;
        this.hpaned1.BorderWidth = ((uint)(1));
        // Container child hpaned1.Gtk.Paned+PanedChild
        this.cachelist1 = new ocmgtk.CacheList();
        this.cachelist1.Events = ((Gdk.EventMask)(256));
        this.cachelist1.Name = "cachelist1";
        this.hpaned1.Add(this.cachelist1);
        Gtk.Paned.PanedChild w4 = ((Gtk.Paned.PanedChild)(this.hpaned1[this.cachelist1]));
        w4.Resize = false;
        // Container child hpaned1.Gtk.Paned+PanedChild
        this.geocachepane1 = new ocmgtk.GeoCachePane();
        this.geocachepane1.Events = ((Gdk.EventMask)(256));
        this.geocachepane1.Name = "geocachepane1";
        this.hpaned1.Add(this.geocachepane1);
        this.vbox1.Add(this.hpaned1);
        Gtk.Box.BoxChild w6 = ((Gtk.Box.BoxChild)(this.vbox1[this.hpaned1]));
        w6.Position = 2;
        w6.Expand = false;
        w6.Fill = false;
        // Container child vbox1.Gtk.Box+BoxChild
        this.statusbar1 = new Gtk.Statusbar();
        this.statusbar1.Name = "statusbar1";
        this.statusbar1.Spacing = 6;
        this.vbox1.Add(this.statusbar1);
        Gtk.Box.BoxChild w7 = ((Gtk.Box.BoxChild)(this.vbox1[this.statusbar1]));
        w7.PackType = ((Gtk.PackType)(1));
        w7.Position = 3;
        w7.Expand = false;
        w7.Fill = false;
        this.Add(this.vbox1);
        if ((this.Child != null)) {
            this.Child.ShowAll();
        }
        this.DefaultWidth = 842;
        this.DefaultHeight = 874;
        this.Show();
        this.DeleteEvent += new Gtk.DeleteEventHandler(this.OnDeleteEvent);
        this.QuitAction.Activated += new System.EventHandler(this.OnQuit);
        this.AboutAction.Activated += new System.EventHandler(this.doAbout);
    }
}
