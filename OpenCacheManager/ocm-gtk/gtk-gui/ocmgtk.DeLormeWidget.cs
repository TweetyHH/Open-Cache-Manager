// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace ocmgtk {
    
    
    public partial class DeLormeWidget {
        
        private Gtk.Table table1;
        
        private Gtk.HBox hbox1;
        
        private Gtk.Image image3;
        
        private Gtk.Button button19;
        
        private Gtk.Label label1;
        
        private Gtk.CheckButton limitCheck;
        
        private Gtk.Entry limitEntry;
        
        private Gtk.CheckButton logCheck;
        
        private Gtk.Entry logEntry;
        
        protected virtual void Build() {
            Stetic.Gui.Initialize(this);
            // Widget ocmgtk.DeLormeWidget
            Stetic.BinContainer.Attach(this);
            this.Name = "ocmgtk.DeLormeWidget";
            // Container child ocmgtk.DeLormeWidget.Gtk.Container+ContainerChild
            this.table1 = new Gtk.Table(((uint)(3)), ((uint)(2)), false);
            this.table1.Name = "table1";
            this.table1.RowSpacing = ((uint)(6));
            this.table1.ColumnSpacing = ((uint)(6));
            // Container child table1.Gtk.Table+TableChild
            this.hbox1 = new Gtk.HBox();
            this.hbox1.Name = "hbox1";
            this.hbox1.Spacing = 6;
            // Container child hbox1.Gtk.Box+BoxChild
            this.image3 = new Gtk.Image();
            this.image3.Name = "image3";
            this.image3.Pixbuf = Stetic.IconLoader.LoadIcon(this, "gtk-dialog-warning", Gtk.IconSize.Menu, 16);
            this.hbox1.Add(this.image3);
            Gtk.Box.BoxChild w1 = ((Gtk.Box.BoxChild)(this.hbox1[this.image3]));
            w1.Position = 0;
            w1.Expand = false;
            w1.Fill = false;
            // Container child hbox1.Gtk.Box+BoxChild
            this.button19 = new Gtk.Button();
            this.button19.CanFocus = true;
            this.button19.Name = "button19";
            this.button19.Relief = ((Gtk.ReliefStyle)(2));
            // Container child button19.Gtk.Container+ContainerChild
            this.label1 = new Gtk.Label();
            this.label1.Name = "label1";
            this.label1.LabelProp = Mono.Unix.Catalog.GetString("<b>Important:</b>DeLorme USB format is only available in GPSBabel 1.4");
            this.label1.UseMarkup = true;
            this.button19.Add(this.label1);
            this.button19.Label = null;
            this.hbox1.Add(this.button19);
            Gtk.Box.BoxChild w3 = ((Gtk.Box.BoxChild)(this.hbox1[this.button19]));
            w3.Position = 1;
            w3.Expand = false;
            w3.Fill = false;
            this.table1.Add(this.hbox1);
            Gtk.Table.TableChild w4 = ((Gtk.Table.TableChild)(this.table1[this.hbox1]));
            w4.TopAttach = ((uint)(2));
            w4.BottomAttach = ((uint)(3));
            w4.RightAttach = ((uint)(2));
            w4.XOptions = ((Gtk.AttachOptions)(0));
            w4.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.limitCheck = new Gtk.CheckButton();
            this.limitCheck.CanFocus = true;
            this.limitCheck.Name = "limitCheck";
            this.limitCheck.Label = Mono.Unix.Catalog.GetString("Limit Number of Geocaches");
            this.limitCheck.Active = true;
            this.limitCheck.DrawIndicator = true;
            this.limitCheck.UseUnderline = true;
            this.table1.Add(this.limitCheck);
            Gtk.Table.TableChild w5 = ((Gtk.Table.TableChild)(this.table1[this.limitCheck]));
            w5.XOptions = ((Gtk.AttachOptions)(4));
            w5.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.limitEntry = new Gtk.Entry();
            this.limitEntry.CanFocus = true;
            this.limitEntry.Name = "limitEntry";
            this.limitEntry.Text = Mono.Unix.Catalog.GetString("1000");
            this.limitEntry.IsEditable = true;
            this.limitEntry.InvisibleChar = '•';
            this.table1.Add(this.limitEntry);
            Gtk.Table.TableChild w6 = ((Gtk.Table.TableChild)(this.table1[this.limitEntry]));
            w6.LeftAttach = ((uint)(1));
            w6.RightAttach = ((uint)(2));
            w6.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.logCheck = new Gtk.CheckButton();
            this.logCheck.CanFocus = true;
            this.logCheck.Name = "logCheck";
            this.logCheck.Label = Mono.Unix.Catalog.GetString("Limit Number of Logs");
            this.logCheck.DrawIndicator = true;
            this.logCheck.UseUnderline = true;
            this.table1.Add(this.logCheck);
            Gtk.Table.TableChild w7 = ((Gtk.Table.TableChild)(this.table1[this.logCheck]));
            w7.TopAttach = ((uint)(1));
            w7.BottomAttach = ((uint)(2));
            w7.XOptions = ((Gtk.AttachOptions)(4));
            w7.YOptions = ((Gtk.AttachOptions)(4));
            // Container child table1.Gtk.Table+TableChild
            this.logEntry = new Gtk.Entry();
            this.logEntry.CanFocus = true;
            this.logEntry.Name = "logEntry";
            this.logEntry.Text = Mono.Unix.Catalog.GetString("5");
            this.logEntry.IsEditable = true;
            this.logEntry.InvisibleChar = '•';
            this.table1.Add(this.logEntry);
            Gtk.Table.TableChild w8 = ((Gtk.Table.TableChild)(this.table1[this.logEntry]));
            w8.TopAttach = ((uint)(1));
            w8.BottomAttach = ((uint)(2));
            w8.LeftAttach = ((uint)(1));
            w8.RightAttach = ((uint)(2));
            w8.XOptions = ((Gtk.AttachOptions)(4));
            w8.YOptions = ((Gtk.AttachOptions)(4));
            this.Add(this.table1);
            if ((this.Child != null)) {
                this.Child.ShowAll();
            }
            this.Hide();
            this.button19.Clicked += new System.EventHandler(this.OnHotplugClick);
        }
    }
}
